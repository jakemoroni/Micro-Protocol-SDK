# Copyright (C) 2022 Jacob Moroni (opensource@jakemoroni.com).
# SPDX-License-Identifier: GPL-3.0-or-later
# Makefile to build and flash the bootloader.

MCU		:= atmega328p
CROSS_COMPILE	:= avr-
#CROSS_COMPILE	:= /home/jmoroni/Programs/avr_toolchain/bin/avr-
# NOTE: Add -flto to BFLAGS when using newer toolchains otherwise
#       the file is too big.

BUILD_DIR	:= ./build
SRC_DIR		:= ./src

# Necessary for building a free standing bootloader.
#BLFLAGS		:= -nostartfiles -nodefaultlibs -nostdlib -ffreestanding
BLFLAGS		:= -nostdlib -ffreestanding -lgcc

CFLAGS		:= -mmcu=$(MCU)
CFLAGS		+= -MMD -MP
CFLAGS		+= -Wall
CFLAGS		+= -Wstrict-prototypes
CFLAGS		+= -Os
CFLAGS		+= -fshort-enums
CFLAGS		+= -ffunction-sections
CFLAGS		+= -fdata-sections
CFLAGS		+= $(BLFLAGS)

LDFLAGS		:= -T$(SRC_DIR)/bootloader.ld
LDFLAGS		+= -Wl,-gc-sections,--relax
LDFLAGS		+= $(BLFLAGS)

ASM_SRCS	:= $(wildcard $(SRC_DIR)/*.S)
C_SRCS		:= $(wildcard $(SRC_DIR)/*.c)
OBJS		:= $(filter %.o, \
			$(patsubst $(SRC_DIR)/%.S,$(BUILD_DIR)/%.o,$(ASM_SRCS)) \
			$(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%.o,$(C_SRCS)))

all:	bootloader.hex

# Compile ASM files.
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.S | $(BUILD_DIR)
	$(CROSS_COMPILE)gcc -c -o $@ $(CFLAGS) $<

# Compile C files.
$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c | $(BUILD_DIR)
	$(CROSS_COMPILE)gcc -c -o $@ $(CFLAGS) $<

bootloader.elf: $(OBJS)
	$(CROSS_COMPILE)gcc -o $@ $(OBJS) $(LDFLAGS)

bootloader.hex: bootloader.elf
	@$(CROSS_COMPILE)objcopy -O ihex $< $@
	$(info Program size:)
	@$(CROSS_COMPILE)size $<

$(BUILD_DIR):
	@mkdir $@

# Generate a random MAC if no file exists.
HWADDR.txt:
	$(info Generating random locally administered MAC address...)
	@echo -n '0200A5' > $@
	@dd bs=1 count=3 if=/dev/random 2>/dev/null | hexdump -v -e '/1 "%02X"' >> $@

# Convert the ASCII HWADDR file into a hex file that can be flashed to the EEPROM.
HWADDR_EEPROM.hex: HWADDR.txt
	@rm -f HWADDR_EEPROM.bin
	@dd if=/dev/zero bs=1 count=1018 2>/dev/null | tr "\000" "\377" > HWADDR_EEPROM.bin
	@cat HWADDR.txt | xxd -r -p >> HWADDR_EEPROM.bin
	@$(CROSS_COMPILE)objcopy -O ihex -I binary HWADDR_EEPROM.bin HWADDR_EEPROM.hex
	@rm HWADDR_EEPROM.bin

.PHONY: flash
# There is a bug in avrdude that causes it to segfault after programming the EEPROM...
flash: bootloader.hex HWADDR_EEPROM.hex
	$(info Programming fuses...)
	@avrdude -c usbtiny -p m328p -U efuse:w:0xFD:m -U hfuse:w:0xD8:m -U lfuse:w:0xFF:m
	$(info Programming flash...)
	@avrdude -c usbtiny -p m328p -U flash:w:bootloader.hex:i
	$(info Programming EEPROM...)
	-@avrdude -c usbtiny -p m328p -U eeprom:w:HWADDR_EEPROM.hex:i

.PHONY: clean
clean:
	@rm -rf bootloader.elf bootloader.hex $(BUILD_DIR) HWADDR_EEPROM.hex

# Incorporate header deps, generated by GCC with -MMD -MP.
-include $(OBJS:%.o=%.d)
